// Generated by CoffeeScript 1.3.3

Ext.define('ExtCoffeeTodo.view.TodoPanel', {
  extend: 'Ext.grid.Panel',
  alias: 'widget.extcoffeetodo-view-todoPanel',
  requires: 'Ext.ux.CheckColumn',
  inject: ['todoStore'],
  controller: 'ExtCoffeeTodo.controller.TodoController',
  layout: 'anchor',
  cellEditing: Ext.create('Ext.grid.plugin.CellEditing', {
    clicksToEdit: 1
  }),
  initComponent: function() {
    var _this = this;
    Ext.applyIf(this, {
      store: this.todoStore,
      emptyText: "There are no Todos yet.",
      columns: [
        {
          header: "Todo Description",
          dataIndex: "description",
          flex: 2,
          editor: {
            allowBlank: false
          }
        }, {
          xtype: "checkcolumn",
          header: "Complete",
          dataIndex: "complete",
          stopSelection: false,
          listeners: {
            checkchange: function(column, rowIndex, checked, opts) {
              return _this.todoStore.sync();
            }
          }
        }
      ],
      listeners: {
        edit: function(editor, event) {
          return _this.todoStore.sync();
        }
      },
      selModel: {
        selType: "cellmodel"
      },
      frame: true,
      tbar: [
        {
          text: "Add Todo",
          handler: function() {
            var newTodo;
            newTodo = Ext.create("ExtCoffeeTodo.model.Todo", {
              description: "New Todo",
              complete: false
            });
            _this.todoStore.insert(0, newTodo);
            return _this.cellEditing.startEditByPosition({
              row: 0,
              column: 0
            });
          }
        }, '->', {
          xtype: "checkbox",
          boxLabel: "Show Completed?",
          boxLabelCls: "toolbar-box-label",
          margin: "0 10 10 0",
          listeners: {
            change: function(field, value) {
              return _this.todoStore.showCompleted(value);
            }
          }
        }
      ],
      plugins: [this.cellEditing]
    });
    return this.callParent(arguments);
  }
});
